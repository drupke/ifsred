-------------------------------------------------------------------------
EXAMPLE LOG FILE FOR REDUCING GMOS DATA
-------------------------------------------------------------------------

NOTES:
- Parameters are optimized for nearby sources with low surface
  brightness, extended emission.
- Flux standard is assumed to be already reduced, with sensitivity
  function output to sens.fits. A telluric correction has also been
  derived from the flux standard.
- Tested with Gemini IRAF v1.12 (with updated scripts from IFSRED to
  include variance propagation) on 2012 Gemini North data with 6
  amplifiers and e2vDD chips.

HISTORY:
  2014feb17, DSNR, created

FILE PREFIXES:
  r = GFREDUCEd (bias subtraction, trimming, mosaicing CCDs)
  x = cosmic rays removed
  e = spectra extracted
  t = wavelength calibration applied
  c = flux calibrated
  s = sky line subtracted
  gd = cube resampled from hexagonal to square spaxels

LEGEND:
  > = IRAF prompt
  IDL> = IDL prompt
  [] = step incomplete
  [x] = step completed

-------------------------------------------------------------------------

GPREPARE  []

Note that the bias is first created from raw exposures with gbias,
including overscan subtraction.

> gprepare @list.raw rawpath=/Your/raw/path/ outim=@list.gp fl_addmdf+
% cp /Your/combined/bias/file.fits bias.fits

BIAS-SUBTRACT, TRACE, and EXTRACT FLATS []

Bias-subtract and trace flat fields. No need to propagate errors, as
they don't get used later. Use the default extraction apertures,
without any further fiddling. (Run interactively first, to make sure
no fibers are dropped.  Which they aren't, in this case.)

Note that the twilight is bright enough to trace itself.

Pretty significant contamination of overscan (basically unremovable
for GCAL flats unless one interpolates between orders), but this is
basically irrelevant for the flatfield and twilight. Just use a
constant bias fit to get the basic offset, and use a few rows
uncontaminated by data.

> gfreduce flt_a,flt_b,...,twi fl_addmdf- fl_gsapp- fl_wav- fl_gsc- fl_sky- fl_flux- bias=bias nbiascontam=20 biasrows="11:40"

CREATE RESPONSE FUNCTION []

Create fiber-by-fiber response function using flatfields and twilight.

> gfresponse erflt_a resp_a skyim="ertwi" fl_int+ fun=spline3 order=40
  gfresponse erflt_b resp_b skyim="ertwi" fun=spline3 order=40
  ...
  gfresponse ertwi resp_t skyim="ertwi" fun=spline3 order=40

EXTRACT ARCS []

> gfreduce arc_a,arc_b,... fl_addmdf- fl_gsapp- fl_wav- fl_gsc- fl_sky- fl_flux- fl_bias- trace- recent- ref="erflt_X" weights=none fl_inter-

FIND WAVELENGTH SOLUTION []

> gswave erarc_a order=6
> gswave erarc_b order=6
...

Used default line identifications, RMS values ~0.06-0.09 A

BIAS SUBTRACTION []

Remove overscan from data, as suggested by Gemini. I checked that even
for the fibers with significant emission due to, e.g., nuclear Halpha,
there is no bleeding into the overscan beyond a few pixels.

We need to reset BIASSEC for each amplifier to ignore the first/last
pixel, which runs a little high.

> hedit dat_*fits[1] BIASSEC [2:32,1:4608] ver-
  hedit dat_*fits[2] BIASSEC [1025:1055,1:4608] ver-
  hedit dat_*fits[3] BIASSEC [2:32,1:4608] ver-
  hedit dat_*fits[4] BIASSEC [1025:1055,1:4608] ver-
  hedit dat_*fits[5] BIASSEC [1025:1055,1:4608] ver-
  hedit dat_*fits[6] BIASSEC [2:32,1:4608] ver-

> gfreduce dat_a fl_vardq+ fl_addmdf- fl_trim+ fl_bias+ fl_gscr- fl_extr- fl_gsap- fl_wav- fl_skys- fl_flux- fl_over+ nbiascont=10 order=3 fl_inter- bias=bias fl_fulldq+
> gfreduce dat_b,dat_c,dat_d,dat_e fl_vardq+ fl_addmdf- fl_trim+ fl_bias+ fl_gscr- fl_extr- fl_gsap- fl_wav- fl_skys- fl_flux- fl_over+ nbiascont=10 order=3 fl_inter- bias=bias fl_fulldq+
...

COSMIC RAY REMOVAL []

Have to re-examine cosmic ray removal for new (as of Oct 2011) GMOS-N
CCDs. Have changed from EEV to e2vDD. The new ones should be more
sensitive to CRs. The default from the past seems to work OK. CRs
produce big spots and are mostly removed, though the outskirts of each
CR not optimally so.

Rather than run the usual lacos.cl script, just run gscrspec.cl from
Gemini (found via Google search). Note that this pulls a gain of 1,
and ignores the "gain multiplier" from each chip, so adjust lacos
parameters accordingly.

> gscrspec rdat_a,rdat_b,... xrdat_a,xrdat_b,... xord=50 yord=0 sigclip=7 sigfrac=0.05 objlim=1.5 niter=4 fl_vardq+

EXTRACTION []

> gfreduce xrdat_a fl_vardq+ fl_addmdf- fl_over- fl_trim- fl_bias- fl_gscr- fl_extr+ fl_gsap- fl_wav- fl_skys- fl_flux- trace- ref="erflt_a" recenter- fl_novlap- resp="resp_a" weights=none fl_inter- fl_fulldq+
  gfreduce xrdat_b,xrdat_c fl_vardq+ fl_addmdf- fl_over- fl_trim- fl_bias- fl_gscr- fl_extr+ fl_gsap- fl_wav- fl_skys- fl_flux- trace- ref="erflt_b" recenter- fl_novlap- resp="resp_b" weights=none fl_inter- fl_fulldq+
  ...

WAVELENGTH CALIBRATION []

> gfreduce exrdat_a,exrdat_b,... fl_vardq+ fl_addmdf- fl_over- fl_trim- fl_bias- fl_gscr- fl_extr- fl_gsap- fl_wav+ fl_skys- fl_flux- wavtra="erarc_a"

FLUX CALIBRATION []

> gscalibrate texrdat_a,texrdat_b,... fl_vardq+ fl_ext+ extinction="/Your/extinction/file"

FIT [OI] FLUXES AND WAVELENGTHS []

IDL> ifsf,'ifsf_galname',skyexp='a',/oned
     ifsf,'ifsf_galname',skyexp='b',/oned
     ...
     ifsfa,'ifsf_galname',skyexp='a',/oned,/noplots
     ifsfa,'ifsf_galname',skyexp='b',/oned,/noplots
     ...

SKY SUBTRACTION []

IDL> gmos_sky,'/Your/path/ctexrdat_a.fits','/Path/to/IFSF/output/galname.lin.xdr','[OI]5577'
     ...

Median velocity shift ~20, dispersion ~1.3, # pixels rejected ~30.

RESAMPLE DATA CUBES []

> gfcube sctexrdat_a.fits fl_dq+ outpref="gd"
  gfcube sctexrdat_b.fits fl_dq+ outpref="gd"
  ...

GFCUBE doesn't treat the variance properly, and I'd have to recompile
GEMINI package if I changed it, so let's kluge the variance treatment.
Just copy it to the science extension and re-run GFCUBE.  Only problem
is that the output has a different wavelength range because of some
automated trimming going on in GFCUBE.  Tried to get around this, but
can't. Kluge by trimming SCI and DQ extensions by hand (last step in
this section).

> fxcopy sctexrdat_a.fits sctexrvar_a.fits 0-1
  imcopy sctexrdat_a.fits[VAR] sctexrvar_a.fits[append,extname=SCI]
fxcopy sctexrdat_b.fits sctexrvar_b.fits 0-1
  imcopy sctexrdat_b.fits[VAR] sctexrvar_b.fits[append,extname=SCI]
  ...

> gfcube sctexrvar_a.fits fl_dq+ outpref="gd"
  gfcube sctexrvar_b.fits fl_dq+ outpref="gd"
  ...

Try to figure out sections common to data and variance.

> fxhead gdsctexrvar*
> implot gdsctexrdat_a[sci][25,22,*]
> implot gdsctexrvar_a[sci][25,22,*]

> fxcopy gdsctexrdat_a.fits cube_a.fits 0
  imcopy gdsctexrdat_a.fits[sci][*,*,8:6193] cube_a.fits[append,extname=SCI]
  imcopy gdsctexrvar_a.fits[sci] cube_a.fits[append,extname=VAR]
  imcopy gdsctexrdat_a.fits[dq][*,*,8:6193] cube_a.fits[append,extname=DQ]
  fxcopy gdsctexrdat_b.fits cube_b.fits 0
  imcopy gdsctexrdat_b.fits[sci][*,*,8:6193] cube_b.fits[append,extname=SCI]
  imcopy gdsctexrvar_b.fits[sci] cube_b.fits[append,extname=VAR]
  imcopy gdsctexrdat_b.fits[dq][*,*,8:6193] cube_b.fits[append,extname=DQ]
  ...

DAR CORRECTION []

> imcopy cube_a[sci] cube_a_sci
  imcopy cube_b[sci] cube_b_sci
  ...

IDL> ifsr_dar,'/Your/cube/path/cube_a.fits',4,4,xranf=[15,33],yranf=[15,35],xranp=[21,23],yranp=[24,26],/circ,sig=10
     ifsr_dar,'/Your/cube/path/cube_b.fits',4,4,xranf=[1,20],yranf=[15,35],xranp=[11,13],yranp=[23,25],/circ,sig=10
     ...


COMBINE DATA []

IDL> cube = ifsf_readcube('/Your/cube/path/dcube_a.fits',/quiet)
     peak = ifsr_peak(cube,[6400,6800],xranf=[15,33],yranf=[15,35])
Peak flux at [21.9,24.7] is 6.50E-02
X/Y-widths: 2.76 / 2.69
...

IDL> ifsr_mosaic,['dcube_a.fits','dcube_b.fits',...],'/Your/cube/path/galname_msc.fits',indir='/Your/cube/path/',/nocent
> imcopy galname_msc[sci] galname_msc_sci

Get rid of regions where interpolation went bad due to treatment of
chip gaps (appears to be during GFCUBE step). Search through cube
using implot to get these regions.

> imrepl galname_msc[sci][*,*,1995:2065] 0
  imrepl galname_msc[var][*,*,1995:2065] 0
  imrepl galname_msc[dq][*,*,1995:2065] 1
  imrepl galname_msc[sci][*,*,4070:4175] 0
  imrepl galname_msc[var][*,*,4070:4175] 0
  imrepl galname_msc[dq][*,*,4070:4175] 1

REBIN IMAGE []

Center in unity-offset coordinates: 24, 27.

IDL> ifsr_rebin,'/Your/cube/path/galname_msc.fits','/Your/cube/path/galname_rb.fits',3,[2,46],[2,52]
> imcopy galname_rb[sci] galname_rb_sci

TELLURIC CORRECTION []

IDL> ifsr_telcor,'/Your/cube/path/galname_rb.fits','/Your/cube/path/galname_rbtc.fits','/Telluric/correction/file.fits'
