Authors: David S. N. Rupke
Last updated: 2020 May 14

Requirements: IFSRED, IFSFIT

Wavelength calibration
----------------------
The default wavelength calibration uses a ThAr atlas and linelist that
doesn't correspond well to the lamp currently in use at Keck,
resulting in a large RMS. I carefully calibrated a KCWI lamp spectrum
using IRAF's IDENTIFY task. The vast majority of lines turn out to be
simply argon lines, as I identified by comparing the Keck ThAr and
FeAr spectra. This makes the actual line identification much easier,
since there are a plethora of possible lines. It also results in a
very good RMS (of order ~0.1 A).

The comparison can be seen in the file
thar_vs_fear_kb180615_00030.pdf. I divided the wavelength range into
four parts and made plots from ThAr and FeAR (that overlap when overlaid on each other) using IMPLOT in IRAF. This file has the following format:
page 1: ThAr bluest
page 2: FeAr bluest
page 3: ThAr bluer
page 4: FeAr bluer
page 5: ThAr redder
... etc.
I used these to line up ThAr and FeAr lines by-eye and identify lines
in common between the two, which are presumably Ar lines. These I
marked with a purple vertical line. Lines unique to either lamp I
marked with a green +.

The ThAr lamp in Keck was changed in fall 2018, and part of the
mismatch in early 2018 was due to the aging lamp, whcih weakened the
Th lines. They are stronger in late fall 2018 data. However, there is
still a big mismatch between the DRP template and the data, so I still
created my own templates for calibration.

Before getting started, copy the template of interest (labeled here by
date) to thar.fits and thar_list.txt files in the .../KcwiDRP/data/
subdirectory. This recalibrated atlas (using Keck's own lamp) applies
to the BL grating and medium slicer with central wavelength 4500 A.

Alternatively, you can create your own template -- if you need to know
how, send me an email (drupke@gmail.com).

Prep step
---------
> kcwi_prep,'path_to_raw','path_to_red',/nonas,verb=1,disp=2

Scattered light subtraction
---------------------------

Default scattered light subtraction:
> kcwi_stage1

My version of scattered light subtraction:

Stack your data along each column:

% ifsr_stack2Dcols.py [path/to/file.fits]

This will show a cross section across slices. You want to find the
inter-slice gaps where scattered light appears but not data does
not. In some gaps, this may amount to as little as one pixel.

Then record for each region that contains only scattered light the
beginning and ending columns (for single-pixel regions, these are the
same). These go in two columns in a text file; one line per region.

Next, create an IDL script that calls IFSR_KCWISCATSUB. The script
initializes the fitting parameters that go into
IFSR_KCWISCATSUB. IFSR_KCWISCATSUB calls MPFITFUN to fit the scattered
light across slices. Here's a script that fits a 4th-degree polynomial
to each half of the data, plotting the results as it goes:

pro ifsr_kcwiscatsub_script
   polydeg=4
   ;  initialize parinfo
   parinfo = REPLICATE({value:0d, fixed:0b, limited:[0B,0B], tied:'', $
                        limits:[0d,0d]},npar)
   ifsr_kcwiscatsub,'data.fits','gaps.txt','ifsr_kcwiscatfun_polygauss',$
	            parinfo,argscatfun={splitpoly: 1b},/plots,sigclip=3d
end

In this example, parinfo initializes the fitting parameters for MPFIT
using the MPFIT syntax (see the MPFIT documentation for more details).

See documentation of IFSR_KCWISCATSUB and IFSR_KCWISCATSUB_POLYGAUSS
for more details.

If you do the scattered light subtraction with my routine instead of
KCWI_STAGE2DARK, you also have to copy the VAR and MSK files over for
the next stage *for each file*:
% cp [filename]var.fits [filename]vard.fits
  cp [filename]msk.fits [filename]mskd.fits

Dark subtraction
----------------
> kcwi_stage2dark

Geometric correction
--------------------
> kcwi_stage3geom

Flat Fielding
-------------
> kcwi_stage4flat

Sky subtraction
---------------
To select the correct regions for sky subtraction, you open the image
up in DS9 and select the regions you want to use for sky subtraction
(or select the regions to mask; I can't remember which way it
goes). Then save this region as a DS9 region and run this python
script:

$ python .../KcwiDRP/devel/kcwi_masksky_ds9.py intf.fits smsk.reg

There is also a way to specify the sky from another frame for sky
subtraction, but that's a little more complicated.

> kcwi_stage5sky				       

Final pipeline steps
--------------------

> kcwi_stage6cube

> kcwi_stage7dar

> kcwi_stage8std

Resampling and mosaic-ing
-------------------------
At this stage you want to resample to (spatially) square spaxels:

> ifsr_kcwiresample,'kb18xxyy_abcde','cube.fits',[6,16,29,81]

To mosaic the cubes requires some reference point. For a quasar this
is relatively easy. First, fit the center:

> cube = ifsf_readcube('cube.fits',/quiet,datext=-1,varext=1,dqext=2)
  peak = ifsr_peak(cube,[3500,5500],xranf=[22,33],yranf=[31,42])
Peak flux at [27.8,35.4] (single-offset indices) is 2.17E-01
X/Y half-widths: 3.35 / 2.99

Then attach the peak location to the header:

--> hedit cube[0] XPEAK "27.8" add+ ver-
    hedit cube[0] YPEAK "35.4" add+ ver-

> ifsr_mosaic,['cube1.fits','cube2.fits',...],'outcube.fits',indir='dir',/nophu

If the quasar is not very well centered, use the option /nocen for
better results.
