[This file differs from EXAMPLE_GMOS_Sep2016.txt because it
incorporates IFUDR_GMOS.]

The current best tool for the basic reduction of GMOS data is the
Gemini IRAF package, v1.13.1. This can be installed from the Gemini
website, as it is no longer packaged with Ureka:

http://www.gemini.edu/sciops/data-and-results/processing-software/releases

(Other options include KUNGIFU and P3D.)

IRAF can now be installed with STScI's AstroConda, which has replaced
Ureka:
http://astroconda.readthedocs.io/en/latest/

The example below was completed using IRAF v2.16.x as installed with
Ureka (v1.4.1.x), which also came with the Gemini IRAF v1.12
package. This example also used an in-development suite that was a
drop-in replacement for the GMOS routines in the Gemini package, IFUDR
GMOS r114, which can be found here:

http://drforum.gemini.edu/topic/gmos-ifu-data-reduction-scripts/

The most recent version of the Gemini IRAF package (v1.13.x) includes
the content of IFUDR GMOS except for the modified GFRESPONSE task. The
latter is available from the site above; it is now IFUDR GMOS r138.

Thus, the example below will look a little different in practice,
though the functionality will be the same. The trick for the user will
be translating the Geminmi v1.12 + IFUDR GMOS r114 commands into
Gemini v1.13.x + IFUDR GMOS r138 commands.

The example below also relies on IFSRED and IFSFIT.

Other helpful information on Gemini data reduction exists online.
- The Gemini Data Reduction User Forum has various useful info:
  http://drforum.gemini.edu/topic-tag/gmos/
- NOAO now has a page dedicated to GMOS data reduction:
  http://ast.noao.edu/sites/default/files/GMOS_Cookbook/
- Various IFS-specific presentations given at data reduction workshops
  General page of workshops:
  http://www.gemini.edu/sciops/data-and-results/data-workshops
  

-------------------------------------------------------------------------
EXAMPLE LOG FILE FOR REDUCING GMOS DATA
-------------------------------------------------------------------------

NOTES:
- Parameters are optimized for nearby sources with a bright point
  source and low surface brightness, extended emission.
- Flux standard is assumed to be already reduced, with sensitivity
  function output to sens.fits. A telluric correction has also been
  derived from the flux standard.
- Tested on 2012 Gemini North data with 6 amplifiers and e2vDD chips.
  
HISTORY:
  2016sep07, DSNR, created

FILE PREFIXES:
  r = GFREDUCEd (bias subtraction, trimming, mosaicing CCDs)
  x = cosmic rays removed
  e = spectra extracted
  t = wavelength calibration applied
  c = flux calibrated
  s = sky line subtracted
  gd = cube resampled from hexagonal to square spaxels

LEGEND:
  > = IRAF prompt
  IDL> = IDL prompt
  [] = step incomplete
  [] = step completed

-------------------------------------------------------------------------

GPREPARE  []

Note that the bias is first created from raw exposures with gbias,
including overscan subtraction.

> gprepare @list.raw rawpath=/Your/raw/path/ outim=@list.gp fl_addmdf+
% cp /Your/combined/bias/file.fits bias.fits

BIAS-SUBTRACT, SCATTERED-LIGHT SUBTRACT, TRACE, and EXTRACT FLATS []

Bias-subtract and trace flat fields. No need to propagate errors, as
they don't get used later. Use the default extraction apertures,
without any further fiddling. (Run interactively first, to make sure
no fibers are dropped.  Which they aren't, in this case.)

Pretty significant contamination of overscan (basically unremovable
for GCAL flats unless one interpolates between orders), but this is
basically irrelevant for the flatfield. Just use a constant bias fit
to get the basic offset, and use a few rows uncontaminated by data.

Just bias subtraction:

> gfreduce flt_a,flt_b,...,twi fl_addmdf- fl_gsapp- fl_wav- fl_gsc- fl_sky- fl_flux- bias=bias nbiascontam=20 biasrows="11:40"

Find spectral blocks:

> fndblocks rflt_a "../v0/erflt_a" "blkmask_rflt_a"
  fndblocks rflt_b "../v0/erflt_b" "blkmask_rflt_b"
  ...
  
Fit scattered light:

The yorder=7 fit seems to work better than yorder=3 especially for the
n=5 and n=6 amplifiers. To see, do, e.g., > implot brflt_a[6]. Test
order of fits with IMEXAM, making sure interblock regions are being
fit properly.

Note: Have to open DS9 before running GFBKGSUB.

> gfbkgsub rflt_a blkmask_rflt_a yorder=7
  gfbkgsub rflt_b blkmask_rflt_b yorder=7
  ... 

Trace and extract:

> gfreduce brflt_a,brflt_b,...e fl_inter+ fl_addmdf- fl_gsapp- fl_wav- fl_gsc- fl_sky- fl_flux- fl_bias- fl_over- fl_trim- 

Used order=10

EXTRACT ARCS []

> gfreduce arc_a,arc_b,... fl_addmdf- fl_gsapp- fl_wav- fl_gsc- fl_sky- fl_flux- fl_bias- trace- recent- ref="erflt_X" weights=none fl_inter-

FIND WAVELENGTH SOLUTION []

> gswave erarc_a order=6
> gswave erarc_b order=6
...

Check RMS of fits to make sure not too large.

CREATE RESPONSE FUNCTION []

Create fiber-by-fiber response function using flatfields. Per James
Turner's advice in IFUDR GMOS, don't use twilight.

> gfresponse ebrflt_a resp_a fl_int+ wavtra=erarc_X fun=spline3 order=50
  gfresponse ebrflt_b resp_b fl_int+ wavtra=erarc_Y fun=spline3 order=50
  ...

Have to re-sample to ignore points on ends and adjust order so shape
is accurately fit, but inter-CCD regions and other artifacts are not.

BIAS SUBTRACTION []

Remove overscan from data, as suggested by Gemini. I checked that even
for the fibers with significant emission due to, e.g., nuclear Halpha,
there is no bleeding into the overscan beyond a few pixels. The IFUDR
GMOS version of GFREDUCE correctly ignores the first/last pixel of
BIASSEC, which runs a little high.

> gfreduce dat_a,dat_b,... fl_vardq+ fl_addmdf- fl_trim+ fl_bias+ fl_gscr- fl_extr- fl_gsap- fl_wav- fl_skys- fl_flux- fl_over+ nbiascont=10 order=3 fl_inter- bias=bias

FIT AND REMOVE SCATTERED LIGHT []

> gfbkgsub rdat_a blkmask_rflt_a xorder=4 yorder=7
  gfbkgsub rdat_b blkmask_rflt_b xorder=4 yorder=7
  ... 

Double-check subtraction with IMEXAM.

COSMIC RAY REMOVAL []

This uses LA COSMIC. Rather than run the usual lacos.cl script, just
run gscrspec.cl from Gemini (found via Google search). Note that this
pulls a gain of 1, and ignores the "gain multiplier" from each chip,
so adjust lacos parameters accordingly. These parameters will have to
be adjusted for the CCD / amplifier configuration in whatever data set is being used.

> gscrspec rdat_a,rdat_b,... xrdat_a,xrdat_b,... xord=50 yord=0 sigclip=7 sigfrac=0.05 objlim=1.5 niter=4 fl_vardq+

Can grow mask by radius of 1.5 pixels to get cosmic ray edges:

> growdq xbr//@list.dat gxbr//@list.dat bitmask=8

... and do better replacement of masked values by making the
interpolation region wider:

> gemfix gxbr//@list.dat fgxbr//@list.dat bitmask=8

This makes some removals better, but some worse (e.g., if the cosmic
ray is on a sky line it gets replaced with background values, and it
looks like a gap in the sky line. Overall the replacement is much
better, however. In the end it may be prudent just to mask these
values in the summation.

EXTRACTION []

> gfreduce fgxbrdat_a fl_vardq+ fl_addmdf- fl_over- fl_trim- fl_bias- fl_gscr- fl_extr+ fl_gsap- fl_wav- fl_skys- fl_flux- trace- ref="ebrflt_a" recenter- fl_novlap- resp="resp_a" weights=none fl_inter-
  gfreduce fgxbrdat_b fl_vardq+ fl_addmdf- fl_over- fl_trim- fl_bias- fl_gscr- fl_extr+ fl_gsap- fl_wav- fl_skys- fl_flux- trace- ref="ebrflt_b" recenter- fl_novlap- resp="resp_b" weights=none fl_inter-
  ...

WAVELENGTH CALIBRATION []

> gfreduce efgxbrdat_a,... fl_vardq+ fl_addmdf- fl_over- fl_trim- fl_bias- fl_gscr- fl_extr- fl_gsap- fl_wav+ fl_skys- fl_flux- wavtra="erarc_a"

FLUX CALIBRATION []

The extinction file can be found in the IFSRED Github distribution.

> gscalibrate tefgxbrdat_a,... fl_vardq+ fl_ext+ extinction="mk_extinct_gem.dat"

FIT [OI] FLUXES AND WAVELENGTHS []

This step uses IFSFIT to find the wavelength of [OI]6300 for each
spaxel to make tweaks to the wavelength calibration.

IDL> ifsf,'ifsf_galname',skyexp='a',/oned
     ifsf,'ifsf_galname',skyexp='b',/oned
     ...
     ifsfa,'ifsf_galname',skyexp='a',/oned,/noplots
     ifsfa,'ifsf_galname',skyexp='b',/oned,/noplots
     ...

SKY SUBTRACTION []

IDL> gmos_sky,'/path/to/data/ctefgxbrdat_a.fits','/path/to/IFSFIT/output/galname.lin.xdr','[OI]5577'
     ...

RESAMPLE DATA CUBES []

> gfcube sctefgxbrdat_a.fits fl_dq+ fl_var+ fl_flux+ outpref="c"
  gfcube sctefgxbrdat_b.fits fl_dq+ fl_var+ fl_flux+ outpref="c"
  ...

PUT DATA ON THE SAME WAVELENGTH SCALE []

Only problem with GFCUBE is that the output of each exposure has a
different wavelength range because of some automated trimming going on
in GFCUBE. Kluge by trimming extensions by hand. Have to examine each
exposure to line up the wavelength ranges and find the common region.

> imhead csctefgxbrdat_?.fits[sci]
csctefgxbrdat_a.fits[sci][33,49,6198][real]: galname
csctefgxbrdat_b.fits[sci][33,49,6198][real]: galname
...
> hsel csctefgxbrdat_?.fits[sci] $I,CRPIX3,CRVAL3,LTM3_3 yes
csctefgxbrdat_a.fits[sci]       -28.    5326.068        1.
csctefgxbrdat_b.fits[sci]       -29.    5326.068        1.
...

> fxcopy csctefgxbrdat_a.fits cube_a.fits 0
  imcopy csctefgxbrdat_a.fits[sci][*,*,2:6198] cube_a.fits[append,extname=SCI]
  imcopy csctefgxbrdat_a.fits[var][*,*,2:6198] cube_a.fits[append,extname=VAR]
  imcopy csctefgxbrdat_a.fits[dq][*,*,2:6198] cube_a.fits[append,extname=DQ]
 fxcopy csctefgxbrdat_b.fits cube_b.fits 0
  imcopy csctefgxbrdat_b.fits[sci][*,*,1:6197] cube_d.fits[append,extname=SCI]
  imcopy csctefgxbrdat_b.fits[var][*,*,1:6197] cube_d.fits[append,extname=VAR]
  imcopy csctefgxbrdat_b.fits[dq][*,*,1:6197] cube_d.fits[append,extname=DQ]
...

> hsel cube_?.fits[sci] $I,CRPIX3,CRVAL3,LTM3_3 yes
cube_a.fits[sci]        -29.    5326.068        1.
cube_b.fits[sci]        -29.    5326.068        1.

DAR []

> imcopy cube_a[sci] cube_a_sci
  imcopy cube_b[sci] cube_b_sci
  ...

IDL> ifsr_dar,'/path/to/data/cube_a.fits',4,4,xranf=[15,33],yranf=[15,35],xranp=[21,23],yranp=[24,26],/circ,sig=10
  ...

COMBINE DATA []

Line up data by finding a common peak.

> cube = ifsf_readcube('/path/to/data/dcube_a.fits',/quiet)
  peak = ifsr_peak(cube,[6400,6800],xranf=[15,33],yranf=[15,35])
Peak flux at [21.9,24.7] is 1.89E+00
X/Y-widths: 2.76 / 2.69
  ...

Mosaic data:

> ifsr_mosaic,['dcube_a.fits','dcube_b.fits',...],'/path/to/output/file.fits',indir='/path/to/input/data/'

Get rid of regions where interpolation went bad due to treatment of
chip gaps (appears to be during GFCUBE step). Search through cube
using implot to get these regions.

> imrepl file[sci][*,*,2010:2065] 0
  imrepl file[var][*,*,2010:2065] 0
  imrepl file[dq][*,*,2010:2065] 1
  ...

REBIN IMAGE []

IDL> ifsr_rebin,'/path/to/mosaic/file.fits','/path/to/output/file.fits',3,[2,46],[2,52]

TELLURIC CORRECTION []

IDL> ifsr_telcor,'/path/to/input/file.fits','/path/to/output/file.fits,'/path/to/telluric/correction.fits',am=1.05,wvcor=0.25

ROTATION []

Cube has to be rotated to achieve correct orientation.

IDL> ifsr_fliprot,'/path/to/in/file.fits','/path/to/out/file.fits',/yflip

ADJUST VARIANCE DOWNWARD []

This is because of something going on in IFUDR GMOS which is not quite
right. Correct it here.

> imarith file[var] / 7.84 file[overwrite,extname=var]
